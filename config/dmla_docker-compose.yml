version: '2'


services:

#########################################################
####                    LOGGING                      ####
#########################################################

  # Runs on your node(s) and forwards all logs to Logstash.
  filebeat:
    container_name: filebeat
    image: docker.elastic.co/beats/filebeat:5.4.0
    volumes:
      - ./filebeat/filebeat.yml:/filebeat.yml
    restart: always
    labels:
      container_group: monitoring
    logging:
      driver: gelf
      options:
        gelf-address: udp://192.16.0.38:12201
        labels: container_group

#########################################################

  # Aggregates logs and forwards them to Elasticsearch.
  logstash:
    container_name: logstash
    image: logstash:5.4.0
    ports:
      - 12201:12201
      - 12201:12201/udp
    expose:
      - 5044
      - 12201/udp
    volumes:
      - ./logstash/config:/config
      - ./logstash/patterns:/opt/logstash/extra_patterns
    restart: always
    labels:
      container_group: monitoring
    networks:
      default:
        ipv4_address: 192.16.0.38
    logging:
      driver: gelf
      options:
        gelf-address: udp://192.16.0.38:12201
        labels: container_group
    command: logstash -f /config --auto-reload

#########################################################

  # Logstash configs can be a hassle. Run 'docker-compose run --rm validate-logstash-config' in order to quickly check your logstash config.
  validate-logstash-config:
    container_name: validate-logstash-config
    image: logstash:5.4.0
    volumes:
      - ./logstash/config:/config
    command: logstash --configtest --config /config

#########################################################

  # Storage and search backend. Gets all logs from Logstash and is the backend that Kibana runs on.
  elasticsearch:
    container_name: elasticsearch
    image: elasticsearch:5.4.0
    ports:
      - 9200:9200
    expose:
      - 9200
    volumes:
      - ./storage/elasticsearch:/usr/share/elasticsearch/data
    restart: always
    labels:
      container_group: monitoring
    logging:
      driver: gelf
      options:
        gelf-address: udp://192.16.0.38:12201
        labels: container_group

#########################################################

  # Pretty frontend to explore and check out all your logs.
  kibana:
    container_name: kibana
    build: kibana/
    ports:
      - 5601:5601
    expose:
      - 5601
    volumes:
      - ./kibana/config/:/opt/kibana/config/
    restart: always
    labels:
      container_group: monitoring
    logging:
      driver: gelf
      options:
        gelf-address: udp://192.16.0.38:12201
        labels: container_group
    environment:
      - NODE_OPTIONS=--max-old-space-size=200
      # fixes memory leak (https://github.com/elastic/kibana/issues/5170)

#########################################################
####                   MONITORING                    ####
#########################################################

  # Runs on your node(s) and forwards node(host) metrics to Prometheus.
  nodeexporter:
    container_name: nodeexporter
    image: prom/node-exporter:v0.13.0
    expose:
      - 9100
    restart: always
    labels:
      container_group: monitoring
    logging:
      driver: gelf
      options:
        gelf-address: udp://192.16.0.38:12201
        labels: container_group

#########################################################

  # Runs on your node(s) and forwards container metrics to Prometheus.
  cadvisor:
    container_name: cadvisor
    image: google/cadvisor:v0.24.1
    ports:
      - 8080:8080
    expose:
      - 8080
    volumes:
      - "/:/rootfs:ro"
      - "/var/run:/var/run:rw"
      - "/sys:/sys:ro"
      - "/var/lib/docker/:/var/lib/docker:ro"
    restart: always
    labels:
      container_group: monitoring
    logging:
      driver: gelf
      options:
        gelf-address: udp://192.16.0.38:12201
        labels: container_group

#########################################################

  # Storage and search backend. Gets all metrics from cAdvisor and Nodeexporter and is the backend that Grafana runs on.
  prometheus:
    container_name: prometheus
    image: prom/prometheus:v1.4.1
    ports:
      - 9090:9090
    expose:
      - 9090
    volumes:
      - ./storage/prometheus:/prometheus
      #Will/23.08.16: dcom restart prometheus suffices to load config/rule changes
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/rules:/etc/prometheus
    restart: always
    command:
      - "-config.file=/etc/prometheus/prometheus.yml"
      - "-storage.local.path=/prometheus"
      - "-web.console.libraries=/etc/prometheus/console_libraries"
      - "-web.console.templates=/etc/prometheus/consoles"
      - "-web.listen-address=:9090"
      - "-alertmanager.url=http://alertmanager:9093"
    labels:
      container_group: monitoring
    logging:
      driver: gelf
      options:
        gelf-address: udp://192.16.0.38:12201
        labels: container_group

#########################################################

  # Pretty frontend to explore and check out all your metrics.
  grafana:
    container_name: grafana
    image: grafana/grafana:4.0.1
    ports:
      - 3000:3000
    expose:
      - 3000
    volumes:
      - ./storage/grafana:/var/lib/grafana
    restart: always
    labels:
      container_group: monitoring
    logging:
      driver: gelf
      options:
        gelf-address: udp://192.16.0.38:12201
        labels: container_group
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin

#########################################################
####                    ALERTING                     ####
#########################################################

  # Alerting plugin wrapping Prometheus and taking care of your metric alerting needs.
  alertmanager:
    container_name: alertmanager
    image: prom/alertmanager:v0.5.1
    ports:
      - 9093:9093
    expose:
      - 9093
    restart: always
    volumes:
      - ./alertmanager/:/etc/alertmanager/
      - ./storage/alertmanager/:/alertmanager
    command:
      - '-config.file=/etc/alertmanager/config.yml'
      - '-storage.path=/alertmanager'
    labels:
      container_group: monitoring
    logging:
      driver: gelf
      options:
        gelf-address: udp://192.16.0.38:12201
        labels: container_group

#########################################################

  # Tool to run queries against your Elasticsearch and when alert when finding certain logs.
  elastalert:
    container_name: elastalert
    build: elastalert/
#    restart: always
    volumes:
      - ./elastalert/log:/opt/log
      - ./elastalert/config:/opt/config
      - ./elastalert/rules:/opt/rules
    environment:
      - ELASTICSEARCH_HOST=elasticsearchhost
    links:
      - elasticsearch:elasticsearchhost
    labels:
      container_group: monitoring
#    logging:
#      driver: gelf
#      options:
#        gelf-address: udp://192.16.0.38:12201
#        labels: container_group

#########################################################
####                   Networking                    ####
#########################################################

# Extra-network is necessary to have a dedicated IP for Logstash to forwards log to.
networks:
  default:
    external:
      name: monitoring_logging

#########################################################


  #### Other tools to look into:
  # alertmanager (Prometheus):
  # watcher (ELK):
  # fluentd (Logstash alternative) :
  # topbeat (Metrics for ELK):
  # collectd (Alternative for metric collection on nodes):


  #### Alternative for Prometheus as a datastore:
  # influxdb:
  #   container_name: influxdb
  #   image: influxdb
  #   expose:
  #     - 8083
  #     - 8086
  #   hostname: influxdb
  #   # volumes:
  #   #   - influxdb:/var/lib/influxdb
  #   restart: always
  #   labels:
  #     container_group: monitoring
  #   logging:
  #     driver: gelf
  #     options:
  #       gelf-address: udp://localhost:12201
  #       labels: monitoring


  #### Example for another endpoint for Prometheus:
  # couchdbstats:
  # container_name: couchdbstats
  # image: gesellix/couchdb-exporter
  # expose:
  #   - 9984
  # hostname: couchdbstats
  # restart: always
  # labels:
  #   container_group: monitoring
  # logging:
  #   driver: gelf
  #   options:
  #     gelf-address: udp://logstash:12201
  #     labels: container_group
  # command: -couchdb.uri=http://couchdb:5984


  #### Get a free datadog account to have a look at their dashboards for inspiration:
  #   datadog:
  #   container_name: datadog
  #   image: datadog/docker-dd-agent
  #   hostname: datadog
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - /proc/:/host/proc/:ro
  #     - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
  #   restart: always
  #   labels:
  #     container_group: monitoring
  #   logging:
  #     driver: gelf
  #     options:
  #       gelf-address: udp://localhost:12201
  #       labels: container_group
  #   environment:
  #     - API_KEY=


